>> for i=0:5
for j=i:5
if (i = j)
??? if (i = j)
          |
Error: MATLAB assignment cannot be nested.

>> for i=0:5
for j=i:5
if (i == j)

fprintf(1,'C%d%d=C[%d][%d]\n', i,j);
else

fprintf(1,'C%d%d=C%d%d=C[%d][%d]\n', i,j,j,i,i,j) ;
end
end
end
C00=C[C01=C10=C[0][1]
C02=C20=C[0][2]
C03=C30=C[0][3]
C04=C40=C[0][4]
C05=C50=C[0][5]
C11=C[C12=C21=C[1][2]
C13=C31=C[1][3]
C14=C41=C[1][4]
C15=C51=C[1][5]
C22=C[C23=C32=C[2][3]
C24=C42=C[2][4]
C25=C52=C[2][5]
C33=C[C34=C43=C[3][4]
C35=C53=C[3][5]
C44=C[C45=C54=C[4][5]
C55=C[>> 
>> c
C00=C[C01=C10=C[0][1]
C02=C20=C[0][2]
C03=C30=C[0][3]
C04=C40=C[0][4]
C05=C50=C[0][5]
C11=C[C12=C21=C[1][2]
C13=C31=C[1][3]
C14=C41=C[1][4]
C15=C51=C[1][5]
C22=C[C23=C32=C[2][3]
C24=C42=C[2][4]
C25=C52=C[2][5]
C33=C[C34=C43=C[3][4]
C35=C53=C[3][5]
C44=C[C45=C54=C[4][5]
C55=C[>> c
C00=C[0][0]
C01=C10=C[0][1]
C02=C20=C[0][2]
C03=C30=C[0][3]
C04=C40=C[0][4]
C05=C50=C[0][5]
C11=C[1][1]
C12=C21=C[1][2]
C13=C31=C[1][3]
C14=C41=C[1][4]
C15=C51=C[1][5]
C22=C[2][2]
C23=C32=C[2][3]
C24=C42=C[2][4]
C25=C52=C[2][5]
C33=C[3][3]
C34=C43=C[3][4]
C35=C53=C[3][5]
C44=C[4][4]
C45=C54=C[4][5]
C55=C[5][5]
>> c
C00=C[0][0];
C01=C10=C[0][1];
C02=C20=C[0][2];
C03=C30=C[0][3];
C04=C40=C[0][4];
C05=C50=C[0][5];
C11=C[1][1];
C12=C21=C[1][2];
C13=C31=C[1][3];
C14=C41=C[1][4];
C15=C51=C[1][5];
C22=C[2][2];
C23=C32=C[2][3];
C24=C42=C[2][4];
C25=C52=C[2][5];
C33=C[3][3];
C34=C43=C[3][4];
C35=C53=C[3][5];
C44=C[4][4];
C45=C54=C[4][5];
C55=C[5][5];
>> > 
??? > 
    |
Error: "End of Input" expected, ">" found.

>> clear
>> btcb
>> who

Your variables are:

B      C      C_iso  aB     

>> B'*C_iso*aB
 
ans =
 
[ conj(N_x)*(lambda+2*mu)*aN_x+conj(N_y)*mu*aN_y+conj(N_z)*mu*aN_z,                          conj(N_x)*lambda*aN_y+conj(N_y)*mu*aN_x,                          conj(N_x)*lambda*aN_z+conj(N_z)*mu*aN_x]
[                          conj(N_y)*lambda*aN_x+conj(N_x)*mu*aN_y, conj(N_y)*(lambda+2*mu)*aN_y+conj(N_x)*mu*aN_x+conj(N_z)*mu*aN_z,                          conj(N_y)*lambda*aN_z+conj(N_z)*mu*aN_y]
[                          conj(N_z)*lambda*aN_x+conj(N_x)*mu*aN_z,                          conj(N_z)*lambda*aN_y+conj(N_y)*mu*aN_z, conj(N_z)*(lambda+2*mu)*aN_z+conj(N_y)*mu*aN_y+conj(N_x)*mu*aN_x]
 
>>  
>> ccode(simplify(B'*C_iso*aB))

ans =

      T[0][0] = conjugate(N_x)*aN_x*lambda+2.0*conjugate(N_x)*mu*aN_x+conjugate(N_y)*mu*aN_y+conjugate(N_z)*mu*aN_z;      T[0][1] = conjugate(N_x)*lambda*aN_y+conjugate(N_y)*mu*aN_x;      T[0][2] = conjugate(N_x)*lambda*aN_z+conjugate(N_z)*mu*aN_x;      T[1][0] = conjugate(N_y)*lambda*aN_x+conjugate(N_x)*mu*aN_y;      T[1][1] = conjugate(N_y)*aN_y*lambda+2.0*conjugate(N_y)*mu*aN_y+conjugate(N_x)*mu*aN_x+conjugate(N_z)*mu*aN_z;      T[1][2] = conjugate(N_y)*lambda*aN_z+conjugate(N_z)*mu*aN_y;      T[2][0] = conjugate(N_z)*lambda*aN_x+conjugate(N_x)*mu*aN_z;      T[2][1] = conjugate(N_z)*lambda*aN_y+conjugate(N_y)*mu*aN_z;      T[2][2] = conjugate(N_z)*aN_z*lambda+2.0*conjugate(N_z)*mu*aN_z+conjugate(N_y)*mu*aN_y+conjugate(N_x)*mu*aN_x;

>> quit
