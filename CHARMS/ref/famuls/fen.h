/*--------------------------------------------------------------------------
--                                                                        --
--         (F)ramework for (A)daptive (MUL)tiphysics (S)imulations        --
--            Copyright (C) 2001, Petr Krysl (pkrysl@ucsd.edu).           --
--                                                                        --
--                 [Pronounce `famulus': scholar's helper]                --
--                                                                        --
--                                                                        --
--  This program is free software; you can redistribute it and/or modify  --
--  it under the terms of the GNU General Public License as published by  --
--  the Free Software Foundation; either version 2 of the License, or     --
--  (at your option) any later version.                                   --
--                                                                        --
--------------------------------------------------------------------------*/
#ifndef FEN_H
# define FEN_H

#include "g3d.h"
#include "bfun_dofparam_pair_id.h"
#include "point.h"
#include "elixir_interface.h"
#include "uniqobj.h"

class FEN {

 public: // definitions ////////////////////////////////////////

  typedef enum { MARKER=0, BALL, NUMBER } FEN_REP;

 public: // object functions ////////////////////////////////////////

  /**
     Make a finite element node.  Give it an identifier (must be unique
     within the mesh of which this node is to be a member), and reference
     coordinates.
   */
  FEN (unsigned int id, POINT ref_loc, class GMESH *gmesh);

  /**
     Get the node identifier.
   */
  unsigned int id () { return _id; }

  /**
     Get reference coordinates.
   */
  POINT ref_loc () { return _ref_loc; }
  /**
     Get gmesh to which this node belongs.
  */
  GMESH *gmesh() { return _gmesh; }
#if defined(GIFACE) && GIFACE
  /**
   */
  GraphicObj *make_elixir_obj (double node_size, FEN_REP fen_rep) {
    return make_elixir_obj (_ref_loc, node_size, fen_rep);
  }

  GraphicObj *make_elixir_obj (FIXED_VECTOR<3> &pt, double node_size, FEN_REP fen_rep) {
    WCRec p[1];
    p[0].x = pt(0);
    p[0].y = pt(1);
    p[0].z = pt(2);
    GraphicObj *go = 0;
    switch (fen_rep) {
    case BALL:
      {
        const int Np = 42;
        static const WCRec spts[Np][3] = {
          {{0.964507,-0.000045,-0.000019},{0.644509,0.326982,-0.656240},{0.588704,0.781119,0.000037}},
          {{0.588704,0.781119,0.000037},{0.132681,0.735971,-0.655701},{-0.258449,0.974809,-0.000028}},
          {{-0.258449,0.974809,-0.000028},{-0.506488,0.589835,-0.655949},{-0.936814,0.432835,-0.000014}},
          {{-0.936814,0.432835,-0.000014},{-0.789842,-0.000003,-0.656537},{-0.936789,-0.432873,-0.000022}},
          {{-0.936789,-0.432873,-0.000022},{-0.506523,-0.589888,-0.655940},{-0.258409,-0.974872,0.000014}},
          {{-0.258409,-0.974872,0.000014},{0.132651,-0.735997,-0.655700},{0.588728,-0.781178,-0.000024}},
          {{0.588728,-0.781178,-0.000024},{0.644515,-0.327038,-0.656219},{0.964507,-0.000045,-0.000019}},
          {{0.964507,-0.000045,-0.000019},{0.644515,-0.327038,-0.656219},{0.644509,0.326982,-0.656240}},
          {{0.644509,0.326982,-0.656240},{0.132681,0.735971,-0.655701},{0.588704,0.781119,0.000037}},
          {{0.132681,0.735971,-0.655701},{-0.506488,0.589835,-0.655949},{-0.258449,0.974809,-0.000028}},
          {{-0.506488,0.589835,-0.655949},{-0.789842,-0.000003,-0.656537},{-0.936814,0.432835,-0.000014}},
          {{-0.789842,-0.000003,-0.656537},{-0.506523,-0.589888,-0.655940},{-0.936789,-0.432873,-0.000022}},
          {{-0.506523,-0.589888,-0.655940},{0.132651,-0.735997,-0.655700},{-0.258409,-0.974872,0.000014}},
          {{0.132651,-0.735997,-0.655700},{0.644515,-0.327038,-0.656219},{0.588728,-0.781178,-0.000024}},
          {{0.644515,-0.327038,-0.656219},{-0.000023,-0.000001,-0.999386},{0.644509,0.326982,-0.656240}},
          {{0.644509,0.326982,-0.656240},{-0.000023,-0.000001,-0.999386},{0.132681,0.735971,-0.655701}},
          {{0.132681,0.735971,-0.655701},{-0.000023,-0.000001,-0.999386},{-0.506488,0.589835,-0.655949}},
          {{-0.506488,0.589835,-0.655949},{-0.000023,-0.000001,-0.999386},{-0.789842,-0.000003,-0.656537}},
          {{-0.789842,-0.000003,-0.656537},{-0.000023,-0.000001,-0.999386},{-0.506523,-0.589888,-0.655940}},
          {{-0.506523,-0.589888,-0.655940},{-0.000023,-0.000001,-0.999386},{0.132651,-0.735997,-0.655700}},
          {{0.132651,-0.735997,-0.655700},{-0.000023,-0.000001,-0.999386},{0.644515,-0.327038,-0.656219}},
          {{0.964507,-0.000045,-0.000019},{0.644506,-0.327009,0.656248},{0.588728,-0.781178,-0.000024}},
          {{0.588728,-0.781178,-0.000024},{0.132653,-0.735979,0.655707},{-0.258409,-0.974872,0.000014}},
          {{-0.258409,-0.974872,0.000014},{-0.506543,-0.589838,0.655903},{-0.936789,-0.432873,-0.000022}},
          {{-0.936789,-0.432873,-0.000022},{-0.789826,-0.000014,0.656545},{-0.936814,0.432835,-0.000014}},
          {{-0.936814,0.432835,-0.000014},{-0.506533,0.589817,0.655902},{-0.258449,0.974809,-0.000028}},
          {{-0.258449,0.974809,-0.000028},{0.132696,0.735960,0.655769},{0.588704,0.781119,0.000037}},
          {{0.588704,0.781119,0.000037},{0.644514,0.326967,0.656250},{0.964507,-0.000045,-0.000019}},
          {{0.964507,-0.000045,-0.000019},{0.644514,0.326967,0.656250},{0.644506,-0.327009,0.656248}},
          {{0.644506,-0.327009,0.656248},{0.132653,-0.735979,0.655707},{0.588728,-0.781178,-0.000024}},
          {{0.132653,-0.735979,0.655707},{-0.506543,-0.589838,0.655903},{-0.258409,-0.974872,0.000014}},
          {{-0.506543,-0.589838,0.655903},{-0.789826,-0.000014,0.656545},{-0.936789,-0.432873,-0.000022}},
          {{-0.789826,-0.000014,0.656545},{-0.506533,0.589817,0.655902},{-0.936814,0.432835,-0.000014}},
          {{-0.506533,0.589817,0.655902},{0.132696,0.735960,0.655769},{-0.258449,0.974809,-0.000028}},
          {{0.132696,0.735960,0.655769},{0.644514,0.326967,0.656250},{0.588704,0.781119,0.000037}},
          {{0.644514,0.326967,0.656250},{0.000023,0.000001,0.999386},{0.644506,-0.327009,0.656248}},
          {{0.644506,-0.327009,0.656248},{0.000023,0.000001,0.999386},{0.132653,-0.735979,0.655707}},
          {{0.132653,-0.735979,0.655707},{0.000023,0.000001,0.999386},{-0.506543,-0.589838,0.655903}},
          {{-0.506543,-0.589838,0.655903},{0.000023,0.000001,0.999386},{-0.789826,-0.000014,0.656545}},
          {{-0.789826,-0.000014,0.656545},{0.000023,0.000001,0.999386},{-0.506533,0.589817,0.655902}},
          {{-0.506533,0.589817,0.655902},{0.000023,0.000001,0.999386},{0.132696,0.735960,0.655769}},
          {{0.132696,0.735960,0.655769},{0.000023,0.000001,0.999386},{0.644514,0.326967,0.656250}}
        };
        LIST l = make_list ();
        for (int i = 0; i < Np; i++) {
          WCRec pts[3];
          for (int j = 0; j < 3; j++) {
            pts[j].x = p[0].x + node_size * spts[i][j].x;
            pts[j].y = p[0].y + node_size * spts[i][j].y;
            pts[j].z = p[0].z + node_size * spts[i][j].z;
          }
          add_to_tail (l, CreateTriangle3D (pts));
        }
        go = CreateGgroup (l);
        free_list (l, NOT_NODES);
      }
      break;
    case MARKER:
      {
        go = CreateMarker3D (p);
      }
      break;
    case NUMBER:
    default:
      {
        char buf[64]; sprintf (buf, " %d", (int) _id);
        go = CreateAnnText3D (p, buf);
      }
      break;
    }
    return go;
  }
#endif

  sizet uniqobjid () const { return _uniqobj.id(); }
  
 private: // object data ////////////////////////////////////////////
  
  sizet             _id;
  POINT             _ref_loc;
  UNIQOBJ           _uniqobj;
  class GMESH      *_gmesh;

};

#endif
